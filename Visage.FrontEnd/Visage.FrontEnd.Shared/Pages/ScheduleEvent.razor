@page "/schedule-event"
@using Visage.FrontEnd.Shared.Models
@using Visage.FrontEnd.Shared.Services
@using Microsoft.AspNetCore.Components.Forms
@inject IEventService EventService
@inject ICloudinaryImageSigningService CloudinaryService
@inject NavigationManager NavigationManager
@using System.Text
@using System.Threading
@using Visage.FrontEnd.Shared.Helpers

<h3 class="text-2xl font-bold">Schedule Your New Event</h3>

<EditForm EditContext="editContext" FormName="ScheduleNewEvent" OnValidSubmit="HandleValidSubmit">

    <div class="input-error">
        <DataAnnotationsValidator />
   
        <ValidationSummary />
    </div>
    

    <fieldset class="fieldset mt-4 bg-base-200 border-base-300 rounded-box w-screen p-4" disabled="@disabled">
        <legend class="fieldset-legend">Event Info</legend>


        <div class="mt-2 grid grid-cols-1 gap-x-6 gap-y-4 sm:grid-cols-6">

            <div class="sm:row-start-1 sm:col-span-4">
                <label for="title" class="label">Event Title</label>
                <InputText id="title" class="input input-bordered focus:input-primary w-full" @bind-Value="newEvent!.Title" placeholder="Make it thematic and memorable" />

            </div>

            <div class="sm:col-span-1">
                <label for="hashtag" class="label">Event Hashtag</label>
                <div class="flex w-full">
                    <div class="text-lg px-2 flex flex-none items-center justify-center bg-base-300">#</div>
                        <InputText id="hashtag" class="input input-bordered focus:input-primary" @bind-Value="newEvent.Hashtag" placeholder="Rule the social media" />
                </div>
            </div>
 
            <div class="sm:row-start-2 sm:col-start-1 sm:col-span-2">
                <label for="startdate" class="label">
                    Start Date
                </label>
                <InputDate id="start_date" min="@DateTime.Today.ToString("yyyy-MM-dd")" @bind-Value="newEvent.StartDate" class="block input focus:input-primary" />
            </div>
            <div class="sm:col-start-3 sm:col-span-2">
                <label for="starttime" class="label">
                    Start Date
                </label>
                <InputDate id="starttime" Type="InputDateType.Time"
                           min="@DateTime.Today.ToString("yyyy-MM-dd")" @bind-Value="newEvent!.StartTime" class="block input input-bordered focus:input-primary" />
            </div>

            <div class="sm:row-start-3 sm:col-start-1 sm:col-span-2">
                <label for="enddate" class="label">
                    End Date
                </label>
                    <InputDate id="enddate" min="@DateTime.Today.ToString("yyyy-MM-dd")" @bind-Value="newEvent.EndDate" class="block input input-bordered focus:input-primary" />
 
            </div>
            <div class="sm:row-start-3 sm:col-span-2">
                <label for="endtime" class="form-control">
                    End Time
                </label>
                <InputDate id="endtime" Type="InputDateType.Time"
                    min="@DateTime.Now" @bind-Value="newEvent.EndTime" class="block input input-bordered focus:input-primary" />
            </div>

            <div class="sm:row-start-4 sm:col-span-4">
                <label for="description" class="label">Description</label>
                <div class="indicator block w-full">
                    <span class="indicator-item badge badge-info badge-xs">Optional</span>
                    <InputTextArea id="description" name="description" placeholder="Tell us all about it!" @bind-Value="newEvent.Description"
                                   class="block w-full input focus:input-primary" />
                </div>
            </div>

            <div class="sm:row-start-5 sm:col-span-4">
                <label for="location" class="form-control">
                    <div class="label">
                        <span class="label-text font-bold">Venue</span>
                    </div>
                    <div class="flex items-center gap-2">
                        <InputText id="location" name="location" placeholder="Put in the awesome location" @bind-Value="newEvent.Location" class="block input input-bordered focus:input-primary grow focus:input-primary"/>

                    </div>

                </label>
            </div>

            <div class="sm:row-start-6 sm:col-span-4">
                <label for="coverPicture" class="label">Cover Picture</label>
                <div class="indicator block w-full">
                    <span class="indicator-item badge badge-info badge-xs">Optional</span>
                    <InputFile id="coverPicture" OnChange="UploadSelectedFile" class="block w-full input input-bordered focus:input-primary" />
                </div>    
                    <small class="text-gray-500">Max size: 5MB. Allowed formats: JPG, PNG.</small>

                @if (isUploading)
                {
                    <div class="flex items-center gap-2">
                        <span class="loading loading-spinner loading-lg"></span>
                        <span>Uploading...</span>
                    </div>
                }
                @if (!string.IsNullOrEmpty(uploadStatusMessage))
                {
                    var isSuccess = uploadStatusMessage.Contains("success", StringComparison.OrdinalIgnoreCase);
                    <div class="mt-2 text-sm  font-semibold @(isSuccess ? "text-success" : "text-error")">@uploadStatusMessage</div>
                }
            </div>

            <button type="submit" class="mt-4 sm:row-start-7 sm:col-span-2 btn btn-primary text-primary-content">Schedule Event</button>
            <button type="reset" class="mt-4 sm:row-start-7 sm:col-span-2  btn btn-secondary hover:input-primary" @onclick="@ClearForm">Clear</button>


        </div>

    </fieldset>

</EditForm>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success mt-4">
        @successMessage
    </div>
}

@code {

    private bool disabled = true; //for rendermode

    //for Image Upload
    private bool isUploading = false;
    private string? uploadStatusMessage;
    private string? successMessage;


    [SupplyParameterFromForm(FormName = "ScheduleNewEvent")]
    private Event? newEvent { get; set; }
    private EditContext? editContext;
    private ValidationMessageStore? messageStore;

    private bool displayValidationErrors =>
        editContext?.GetValidationMessages().Any() == true;

    private IBrowserFile? selectedFile;

    private static readonly string[] AllowedImageTypes = { "image/png", "image/jpeg" };
    private const long MaxCoverPictureSize = 512_000; // 500 KB

    protected override void OnInitialized()
    {
        newEvent = new Event()
        {
            StartDate = DateOnly.FromDateTime(DateTime.Now),
            StartTime = TimeOnly.FromDateTime(DateTime.Now),
            EndDate = DateOnly.FromDateTime(DateTime.Now),
            EndTime = TimeOnly.FromDateTime(DateTime.Now.AddHours(1))
        };
        editContext = new EditContext(newEvent);
        editContext.SetFieldCssClassProvider(new DaisyUIInputError());

        editContext.OnValidationRequested += HandleValidationRequested;
        messageStore = new(editContext);

        if (RendererInfo.IsInteractive)
        {
            disabled = false;
        }
    }

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args)
    {
        messageStore?.Clear();

        if (newEvent != null && editContext is not null)
        {
            var now = DateTime.Now;
            var eventStartDateTime = new DateTime(newEvent.StartDate.Year, newEvent.StartDate.Month, newEvent.StartDate.Day, newEvent.StartTime.Hour, newEvent.StartTime.Minute, newEvent.StartTime.Second);

            if (eventStartDateTime < now.AddHours(1))
            {
                messageStore?.Add(editContext.Field(nameof(newEvent.StartTime)), "Event must be scheduled at least one hour into the future.");
            }

            if (newEvent.EndDate < newEvent.StartDate ||
                (newEvent.EndDate == newEvent.StartDate && newEvent.EndTime <= newEvent.StartTime))
            {
                messageStore?.Add(editContext.Field(nameof(newEvent.EndDate)), "End date and time must be after start date and time.");
            }
        }
    }

    private async Task UploadSelectedFile(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        uploadStatusMessage = null;

        // Check file size
        if (selectedFile != null && selectedFile.Size > MaxCoverPictureSize)
        {
            uploadStatusMessage = $"Selected file is too large ({selectedFile.Size / 1024} KB). Maximum allowed size is {MaxCoverPictureSize / 1024} KB.";
            isUploading = false;
            StateHasChanged();
            return;
        }

        // Check file type
        if (selectedFile != null && !selectedFile.HasAllowedImageExtension())
        {
            uploadStatusMessage = "Invalid file extension. Only JPG and PNG images are allowed.";
            isUploading = false;
            StateHasChanged();
            return;
        }

        isUploading = true;

        try
        {
            if (selectedFile != null)
            {
                var uploadParams = await CloudinaryService.SignUploadAsync();
                var CloudinaryApiKey = Environment.GetEnvironmentVariable("Cloudinary__ApiKey");
                var cloudName = Environment.GetEnvironmentVariable("Cloudinary__CloudName");

                using (var cloudinaryAPI = new HttpClient())
                using (MultipartFormDataContent formImage = new("CloudinaryUpload"))
                {
                    formImage.Add(new StringContent(CloudinaryApiKey!.Trim(), Encoding.UTF8), @"""api_key""");
                    formImage.Add(new StringContent(uploadParams.signature.Trim(), Encoding.UTF8), @"""signature""");
                    formImage.Add(new StringContent(uploadParams.timestamp.ToString().Trim(), Encoding.UTF8), @"""timestamp""");

                    var imageContent = new StreamContent(selectedFile.OpenReadStream());
                    imageContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/octet-stream");
                    formImage.Add(imageContent, "file", selectedFile.Name);

                    var request = new HttpRequestMessage(HttpMethod.Post, $"https://api.cloudinary.com/v1_1/{cloudName}/auto/upload")
                    {
                        Content = formImage
                    };

                    try
                    {
                        using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(20));
                        using var response = await cloudinaryAPI.SendAsync(request, cts.Token);

                        var responseContent = await response.Content.ReadAsStringAsync();

                        if (response.IsSuccessStatusCode)
                        {
                            string? url = null;
                            try
                            {
                                url = System.Text.Json.JsonDocument.Parse(responseContent).RootElement.GetProperty("url").GetString();
                            }
                            catch (Exception ex)
                            {
                                Console.WriteLine($"Failed to parse Cloudinary response: {ex.Message}\nResponse: {responseContent}");
                            }
                            newEvent!.CoverPicture = url;
                            uploadStatusMessage = url != null ? "Image uploaded successfully!" : "Image uploaded, but URL could not be parsed.";
                        }
                        else
                        {
                            string userMessage = "Error uploading image. Please try again.";
                            try
                            {
                                var errorObj = System.Text.Json.JsonDocument.Parse(responseContent).RootElement;
                                if (errorObj.TryGetProperty("error", out var errorProp) && errorProp.TryGetProperty("message", out var msgProp))
                                {
                                    userMessage = msgProp.GetString() ?? userMessage;
                                }
                            }
                            catch { /* Ignore parse errors, fallback to generic message */ }

                            uploadStatusMessage = userMessage;
                            Console.WriteLine($"Cloudinary upload error: {response.StatusCode}, {responseContent}");
                        }
                    }
                    catch (OperationCanceledException)
                    {
                        uploadStatusMessage = "Upload timed out. Please try a smaller image or check your connection.";
                    }
                    catch (Exception ex)
                    {
                        uploadStatusMessage = "Unexpected error during upload. Please try again.";
                        Console.WriteLine($"Unexpected error during upload: {ex.Message}");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            uploadStatusMessage = "Unexpected error during upload. Please try again.";
            Console.WriteLine($"Outer error during upload: {ex.Message}");
        }
        finally
        {
            isUploading = false;
            StateHasChanged();
        }
    }

    private async Task HandleValidSubmit()
    {
        await EventService.ScheduleEvent(newEvent!);
        successMessage = "Event scheduled successfully!";
        StateHasChanged();
        await Task.Delay(3000);
        NavigationManager.NavigateTo("/");
    }


    public void Dispose()
    {
        if (editContext is not null)
        {
            editContext.OnValidationRequested -= HandleValidationRequested;
        }
    }

    private void ClearForm()
    {
        newEvent = new();
    }
}
