<AuthorizeView>
    <Authorized>
        <div class="dropdown dropdown-end">
            <div tabindex="0" role="button" class="btn btn-ghost btn-circle avatar">
                <div class="w-10 rounded-full">
                    <img alt="@Username" src="@ProfileImage" />
                </div>
            </div>
            <ul tabindex="0" class="mt-3 z-[1] p-2 shadow menu menu-sm dropdown-content bg-base-100 rounded-box w-52">
                <li>
                    <a href="/profile" class="justify-between">
                        Profile
                        <span class="badge">New</span>
                    </a>
                </li>
                <li><a>Settings</a></li>
                <li class="p-0">
                    <form method="post" action="/Account/Logout" class="inline">
                        <button type="submit" class="btn btn-link p-0 m-0">Log out</button>
                    </form>
                </li>
            </ul>
        </div>
        
    </Authorized>
    <NotAuthorized>
        <a href="Account/Login?redirectUri=/">Log in</a>
    </NotAuthorized>
</AuthorizeView>

@code{

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private string? Username;

    private string? ProfileImage;

    protected override async Task OnInitializedAsync()
    {

        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user?.Identity is not null && user.Identity.IsAuthenticated)
            {
                Username = user?.Identity?.Name ?? string.Empty;

                ProfileImage = user?.Claims?.FirstOrDefault(c => c.Type == "picture")?.Value;

            }
            
        }
    }
}
